import java.util.ArrayList;
import java.util.List;
import java.util.Stack;

class Solution {
    public static int solution(int[][] board, int[] moves) {
        int answer = 0;

        // 배열 재정리
        List<Stack<Integer>> new_board = new ArrayList<>();
        for (int i=0; i<board.length; ++i) {
            Stack<Integer> stack = new Stack<>();
            for (int j=board.length-1; j>=0; --j) {
                if (board[j][i] != 0)
                    stack.push(board[j][i]);
            }

            new_board.add(stack);
        }

        // simulate
        Stack<Integer> bucket = new Stack<Integer>();
        for (int i=0; i<moves.length; ++i) {
            answer += _step(new_board, moves[i], bucket);
        }


        return answer;
    }

    private static int _step(List<Stack<Integer>> new_board, int move, Stack<Integer> bucket) {
        move -= 1;

        // pick one
        Stack<Integer> stack = new_board.get(move);
        if (stack.empty()) {
            return 0;
        }

        int picked = stack.pop();

        // put
        // empty bucket or not matched
        if (bucket.empty() || picked != bucket.peek()) {
            bucket.push(picked);
            return 0;

        } else {
            bucket.pop();
            return 2;
        }
    }

}